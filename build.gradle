buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		maven { url "http://clojars.org/repo/" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	//id 'org.openjfx.javafxplugin' version '0.0.5'
}
apply plugin: 'com.github.johnrengelman.shadow'

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

//javafx {
//    modules = [ 'javafx.controls', 'javafx.swing', 'javafx.web' ]
//}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
			srcDirs 'src/proto/java'
	   		srcDir 'src/example/java'
        }
        resources {
        	srcDir 'conf'
    	}
    }
	test {
	   	java {
	   		srcDir 'src/test/java'
	   	}
    }
}

//Java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

def grpcVersion = '1.23.0'

dependencies {    
    // include ailibs for compilation
    compile ('ai.libs:mlplan-meka:0.2.3') {
 		exclude group: 'org.nd4j'
 		exclude group: 'org.bytedeco.javacpp-presets'
 		exclude group: 'org.deeplearning4j'
 		exclude group: 'org.openjfx'
 		exclude group: 'com.sun.jersey'
 		exclude group: 'org.glassfish.jersey.core'
 		exclude group: 'org.glassfish.jersey.inject'
 		exclude group: 'org.apache.hadoop'
 		exclude group: 'org.apache.maven'
 		exclude group: 'org.apache.zookeeper'
 		exclude group: 'org.glassfish.jersey.ext'
 		exclude group: 'org.eclipse.rdf4j'
 		exclude group: 'net.sourceforge.owlapi'
 		exclude group: 'org.graphstream'
 		exclude group: 'com.github.graphstream'
 		exclude group: 'ai.libs.thirdparty'
    }
    
    compile ('ai.libs.thirdparty:interruptible-weka:0.1.5')
    compile ('ai.libs.thirdparty:interruptible-meka:0.1.2')
    compile ('commons-lang:commons-lang:2.6')
    
    compile fileTree(dir: 'libs', include: '*.jar')
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	runtimeOnly group: 'org.slf4j', name:'slf4j-log4j12', version:'1.7.25'
    
    compile ("io.grpc:grpc-api:${grpcVersion}")
    compile ("io.grpc:grpc-core:${grpcVersion}")
    compile ("io.grpc:grpc-stub:${grpcVersion}")
    compile ("io.grpc:grpc-protobuf:${grpcVersion}")
  	compile ("io.grpc:grpc-netty:${grpcVersion}")
    compile ("com.google.protobuf:protobuf-java:3.11.0")

    // Use JUnit test framework
  	testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  	testCompile group: 'junit', name: 'junit-dep', version: '4.11'
  	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  	testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'
    testImplementation('junit:junit:4.11')
}



shadowJar {
    mergeServiceFiles()
}

jar {
    manifest {
        attributes(
            //'Main-Class': "ai.libs.hyperopt.experimenter.AutoMLCExperimenter"
            'Main-Class': "ai.libs.mlplan.experimenter.MLPlanExperimenter"
        )
    }
}

// Optimizer Tests

task testHTNBF(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "ai.libs.hyperopt.experimenter.test.BFTest"
}

task testBOHB(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "ai.libs.hyperopt.experimenter.test.BOHBTest"
}

task testHTNBF(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "ai.libs.hyperopt.experimenter.test.BFTest"
}

// Result Generation Tasks
task compileScatterPlots(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "results.ScatterPlots"
}

task compileAnytimeAverageRankPlots(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.anytime.AnytimeAverageRankPlotter"
}

task compileResultTables(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.solution.ResultTable"
}

task compileIncumbentFrequencyStatistics(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.candidates.IncumbentStats"
}


// Search Space Description Tasks
task exportSearchSpacesToGephiFormat(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = "benchmark.results.searchspace.GephiExportView"
}

task exportAlgorithmsInSearchSpace(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.searchspace.SearchSpaceAlgorithmList"
}

task generateSingleLabelSearchSpaceDescription(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.searchspace.SearchSpaceDescription"
  args = ["weka", "searchspace-weka.html"]
}

task generateMultiLabelSearchSpaceDescription(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "benchmark.results.searchspace.SearchSpaceDescription"
  args = ["meka", "searchspace-meka.html"]
}

// Benchmark API

task generateDatasetSplits(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = "benchmark.meka.impl.DatasetSplitter"
}

task initializeExperimentsInDatabase(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = "benchmark.meka.experimenter.AutoMLCExperimenter"
	args = ["init"]
}

task runExperimentEvaluationWorker(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = "benchmark.meka.experimenter.AutoMLCExperimenter"
	args = ["run"]
}

task cleanExperimentsInDatabase(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = "benchmark.meka.experimenter.AutoMLCExperimenter"
	args = ["delete"]
}

task generateAll {
	// search space describing artefacts
	exportAlgorithmsInSearchSpace
	exportSearchSpacesToGephiFormat
	generateSingleLabelSearchSpaceDescription
	generateMultiLabelSearchSpaceDescription
	
	// generate result data analysis artefacts
	compileScatterPlots
	compileAnytimeAverageRankPlots
}

configurations {
}

eclipse {
	project.natures "org.eclipse.buildship.core.gradleprojectnature"
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url "http://clojars.org/repo/" }
	maven { url "https://plugins.gradle.org/m2/" }
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}
